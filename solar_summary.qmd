---
title: "Analysis North Solar Data"
format:
  html:
    echo: false
jupyter: python3
---
```{python}
import time
from datetime import timedelta, datetime
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
plt.style.use('bmh')

import warnings
# Suppress all warnings
warnings.filterwarnings("ignore")

import settings

# path to this directory
#APP_PATH = dirname(realpath(__file__))
FN_RECORDS = 'records.csv'

MONTH_NAMES = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']

def get_data(use_dst=True):
    """ Read the data, delete device count column.
    Rembmer that the timestamps mark the end of the interval
    Make a Date/Time field, Alaska Time, and use it for the 
    index.  Fill out missing 5 minute intervals with 0s.
    If 'use_dst' is True, account for Daylight Savings Time.
    Drop the 'usecols' parameter to get the 'device_count' column
    as well.
    """
    dfd = pd.read_csv(FN_RECORDS, usecols=['ts', 'power'])
    dfd['dts'] = pd.to_datetime(dfd.ts, unit='s')
    dfd.drop(['ts'], axis=1, inplace=True)
    if not use_dst:
        akst_adj = timedelta(hours=9)
        dfd['dts'] = dfd.dts - akst_adj
    dfd.set_index('dts', inplace=True)
    dfd = dfd[~dfd.index.duplicated(keep='last')]
    dfd = dfd.asfreq('5T', fill_value=0.0)
    if use_dst:
        dfd.index = dfd.index.tz_localize('UTC').tz_convert('US/Alaska').tz_localize(None)
        dfd = dfd.sort_index()

    return dfd

# 'style' the plot like fivethirtyeight.com website
#plt.style.use('bmh')

#plt.rcParams['figure.figsize']= (10, 7)   # set Chart Size
#plt.rcParams['font.size'] = 14            # set Font size in Chart

df = get_data(use_dst=True)

# daily total kWh, and add some grouping columns
dfd = df.resample('1D').sum()/12000.
dfd.columns=['kWh']
dfd['day_of_year'] = dfd.index.dayofyear
dfd['yr'] = dfd.index.year
```

[Back to Analysis North Website](https://analysisnorth.com)

Analysis North has a 2.85 kW-DC grid-connected photovoltaic solar system installed at our place
of business in Anchorage, Alaska (Alan Mitchell's house).  The system consists of
ten 285 Watt SW 285 SolarWorld panels coupled to ten Enphase S280 microinverters
with a total capacity of 2.80 kW-AC.
The system is roof-mounted, tilted at 45 degrees and oriented 8 degrees
West of South.

The graphs below summarize the performance of the system to date.  These graphs
are updated every 10 minutes; press F5 to have your browser refresh
the data.

The code for acquiring the solar data and creating this page is available at 
[Alan Mitchell's GitHub site](https://github.com/alanmitchell/solar-summary).

## Recent Production

This shows the daily energy production from the system for the last four weeks.  Note that
the most recent day, shown at top, could be a partial day or could be the last day that
had non-zero production.

```{python}
# kWh bar graph for last 4 weeks production
dfdt = dfd[['kWh']].tail(28)
ax = dfdt.plot.barh(legend=False, width=0.8, figsize=(9.5, 9))
ax.grid(True, axis='x')
ax.grid(False, axis='y')
y_axis = ax.get_yaxis()
yticklabels = [d.strftime('%b %d') for d in dfdt.index]
y_axis.set_ticklabels(yticklabels)
y_axis.get_label().set_visible(False)
ax.set_xlabel('kWh produced in Day')
for i in range(len(dfdt)):
  kWh = dfdt.iloc[i].kWh 
  if kWh > dfdt.kWh.max() * 0.07:
    ax.text(kWh*.99, i-.15, 
      '{:.2f}'.format(kWh), 
      horizontalalignment='right',
      weight='bold',
      color='white')

ax.get_figure().show()
```

Here is a graph of the power production today (thick blue line), yesterday (thin red line), 
and the days with minimum and maximum energy production during the last four weeks
(thinner dashed lines):

```{python}
def day_to_lbl(d):
  return str(d)[:10]

cur_day = dfdt.index[-1]
prev_day = dfdt.index[-2]
max_day = dfdt.kWh.idxmax()
min_day = dfdt[:-1].kWh.idxmin()

max_done = False
min_done = False
if cur_day == max_day:
  cur_day_lbl = f'{day_to_lbl(cur_day)} max'
  max_done = True
else:
  cur_day_lbl = day_to_lbl(cur_day)

if prev_day == max_day:
  prev_day_lbl = f'{day_to_lbl(prev_day)} max'
  max_done = True
elif prev_day == min_day:
  prev_day_lbl = f'{day_to_lbl(prev_day)} min'
  min_done = True
else:
  prev_day_lbl = day_to_lbl(prev_day)
    
plot_days = [
    (cur_day, cur_day_lbl),
    (prev_day, prev_day_lbl)
]
if not max_done:
  plot_days.append(
    (max_day, f'{day_to_lbl(max_day)} max')
  )
if not min_done:
  plot_days.append(
    (min_day, f'{day_to_lbl(min_day)} min')
)

fig, ax = plt.subplots(figsize=(9.5, 6))
for dt, lbl in plot_days:
  df_1day = df.loc[str(dt) : str(dt + pd.Timedelta('86399S'))]   # through last second of day
  xvals = [t.hour + t.minute/60 for t in df_1day.index.time]
  if dt==cur_day:
    ax.plot(xvals, df_1day.power, linewidth=3, label=lbl)
  elif dt==prev_day:
    ax.plot(xvals, df_1day.power, linewidth=1.2, label=lbl)
  else:
    ax.plot(xvals, df_1day.power, linewidth=1.2, linestyle='--', label=lbl)        

ax.set_xticks(range(0, 25, 2))
ax.legend()
ax.set_ylabel('Power Produced Today, Watts')
ax.set_xlabel('Hour of Day')
fig.show()
```


## Cumulative Energy Production for the Year

This graph shows the cumulative energy production of the system for the current year
and for all previous years as separate lines.  For example, a value of 300 kWh on the
Y-axis for March 20 means that a total of 300 kWh were produced for the days of the year
prior to March 20.

```{python}
# Make a set of tick locations and labels for those plots that
# plot against each day of the year.  Mark the start of each month.
doy_locs = []
doy_lbls = []
for m in range(1, 13):
  dt = datetime(2018, m, 1)
  doy_locs.append(dt.timetuple().tm_yday)
  doy_lbls.append(dt.strftime('%b'))

# Cumulative kWh for each year, by Day-of-Year
dfdp = pd.pivot_table(dfd, values='kWh', index='day_of_year', columns='yr')
dfdp.drop([2016], axis=1, inplace=True)   # doesn't start at beginning of year
ax = dfdp.cumsum().plot(figsize=(9.5, 6))
ax.set_ylabel('Cumulative kWh')
ax.set_xlabel('Day of Year')
ax.set_xticks(doy_locs, doy_lbls)
ax.set_xlim(-5, 370)
ax.get_figure().show()
```

This graph below is the same as above except it does not show days of the year beyond the
current day.

```{python}
dfcs = dfdp.cumsum().dropna()
ax = dfcs.plot(figsize=(9.5, 6))
ax.set_xlabel('Day of Year');
ax.set_ylabel('Cumulative kWh')
# limit the xticks
locs = [l for l in doy_locs if l <= dfcs.index[-1] + 15]
ax.set_xticks(locs, doy_lbls[:len(locs)])
ax.get_figure().show()
```

## Monthly Energy and Power

This graph shows the total number of kWh produced in each month;
each year is shown on a separate line so monthly comparisons between years
are possible.  Note that the most recent month is usually a partial month so will
appear to have a low value.

```{python}
dfm = df.resample('1M').sum() / 12000.
dfm['mo'] = dfm.index.month
dfm['yr'] = dfm.index.year
dfmp = pd.pivot_table(dfm, values='power', index='mo', columns='yr')
ax = dfmp.plot(marker='o', linewidth=1, figsize=(9.5, 6))
ax.set_xticks(range(0,13))
ax.set_xticklabels([''] + MONTH_NAMES)
ax.set_ylabel('kWh in Month')
ax.set_xlabel('Month')
ax.get_figure().show()
```

This graph shows the peak power production that has occurred in each month.  It finds
the peak power across *all* of the years of data for each month.

```{python}
dfb = df.copy()
dfb['Hour'] = dfb.index.hour
dfb['mo'] = dfb.index.month
ax = dfb.groupby('mo').agg('max')['power'].plot(marker='o', linewidth=1, figsize=(9.5, 6))
ax.set_ylabel('Maximum Power Production, Watts')
ax.set_xlabel('Month')
ax.set_xticks(range(0,13))
ax.set_xticklabels([''] + MONTH_NAMES);
ax.get_figure().show()  
```

Below, an average production profile is shown for each month.  The Y-axis value is average
power in Watts produced for the hour (0 - 23) shown on the X-axis.

```{python}
dfbp = dfb.pivot_table(values='power', index='Hour', columns='mo', aggfunc='mean')
dfbp.columns = MONTH_NAMES
ax = dfbp.plot(subplots=True, layout=(4, 3), figsize=(9.5, 16), sharex=True, sharey=True)
plt.yticks(range(0, 3000, 500))
plt.xticks(range(0, 25, 4))
plt.gcf().show()
```

## Spread of Daily Production Values

This boxplot show the spread and the median daily energy production values for each
month.

![monthly box plot](images/monthly_box.png?q=1)

In the plot below, each dot is data from one day.  The Y-axis value is the kWh energy
produced during the day, and the X-axis value is the day of the year.  So, the graph also
is good at showing the distribution of daily energy production values that occur at
different times of the year.

![daily production](images/daily_production.png?q=1)

## Record-Setting Days

Here is the day where the most kWh were produced:

![day with maximum energy](images/max_energy_day.png?q=1)

Here is the day that had the highest 5 minute power production.  This is generally
a day where the solar noon sun comes out from behind some clouds.  As well as the 
solar panels receiving the direct sun, they also receive substantial radiation from
sun rays redirected as they pass through the clouds adjacent to the sun.

![day with maximum peak power](images/max_power_day.png?q=1)

## An Important Number: Normalized Annual Production

Here is a graph of an important performance number for the system.  If you
take the production of the system for a year in kWh (AC delivered to the grid) 
and then divide by 
the rated capacity of the system in kW (rated DC panel capacity), you have calculated
normalized annual production for the system.  For example, a normalized production of 850 kWh-AC / kW-DC
means that each 1 kW of rated capacity in this system produces 850 kWh-AC of electricity
for the year. For this particular system, this number will vary due to 
how sunny the year is, dirt and snow accumulation on the panels,
and due to general degradation of output over time.  When
comparing to other systems, the number will vary due to additional factors such 
location of the system, tilt and orientation, shading, etc.  Normalized
production in California is quite a bit more than Alaska.

The graph below plots this normalized production on rolling year basis.  The 
first point shown below is for October 1, 2017 and has a value of about
848 kWh / kW.  That means for the 365 days prior to October 1, 2017, the system
produced 848 kWh for each 1 kW of installed capacity.  Each additional point
on the line indicates the normalized production for the 365 days preceding the
date on the horizontal axis.

![rolling normalized production](images/rolling_yr_kwh.png?q=1)

---

<p>
Powered by: <a href="http://enphase.com"><img alt="Enphase Logo" src="images/Powered_By_Enphase_Logo.png" width="200"></a>
</p>
Solar data is acquired through use of the Enphase API (application programming interface).  
All data analysis and graphing is custom programming done by Analyis North and is available at 
[Alan Mitchell's GitHub site](https://github.com/alanmitchell/solar-summary).
